<?php
/*
Plugin Name: WordPress Malware Scanner
Description: A plugin to scan and clean WordPress installations for malware.
Author: RiotRequest
Version: 1.5
*/

// Add admin menu
function malware_scanner_menu() {
    add_menu_page(
        'Malware Scanner',
        'Malware Scanner',
        'manage_options',
        'malware-scanner',
        'malware_scanner_admin_page',
        'dashicons-shield',
        100
    );
}
add_action('admin_menu', 'malware_scanner_menu');

// Admin page content
function malware_scanner_admin_page() {
    ?>
    <div class="wrap">
        <h1>Malware Scanner</h1>
        <p>Click the button below to scan your WordPress installation for malware.</p>
        <button id="scan-malware" class="button button-primary">Run Scan</button>
        <button id="dry-run-malware" class="button">Dry Run</button>
        <div id="scan-results"></div>
    </div>
    <script type="text/javascript">
        jQuery(document).ready(function($) {
            $('#scan-malware').on('click', function() {
                $('#scan-results').html('Scanning...');
                $.post(ajaxurl, {
                    action: 'scan_and_clean_wordpress',
                    mode: 'scan'
                }, function(response) {
                    $('#scan-results').html(response);
                });
            });
            $('#dry-run-malware').on('click', function() {
                $('#scan-results').html('Scanning...');
                $.post(ajaxurl, {
                    action: 'scan_and_clean_wordpress',
                    mode: 'dry_run'
                }, function(response) {
                    $('#scan-results').html(response);
                });
            });
        });
    </script>
    <?php
}

// AJAX handler
function scan_and_clean_wordpress_ajax() {
    if (!current_user_can('manage_options')) {
        wp_die('Unauthorized user');
    }

    $mode = isset($_POST['mode']) ? sanitize_text_field($_POST['mode']) : 'dry_run';
    $result = scan_and_clean_wordpress(ABSPATH, $mode);
    echo wp_kses_post(nl2br($result));
    wp_die();
}
add_action('wp_ajax_scan_and_clean_wordpress', 'scan_and_clean_wordpress_ajax');

// Scan and clean function
function scan_and_clean_wordpress($directory, $mode = 'dry_run') {
    // List of common WordPress malware file types and extensions
    $malware_types = [
        "application/x-php", // PHP files
        ".php", // PHP files
        ".phtml", // PHP files
        ".php3", // PHP files
        ".php4", // PHP files
        ".php5", // PHP files
        ".php7", // PHP files
        ".phps", // PHP files
        ".js", // JavaScript files
        ".html", // HTML files
        ".htm", // HTML files
        ".htaccess" // Apache server configuration file
    ];

    // List of common WordPress malware strings
    $malware_strings = [
        "<?php", // PHP opening tag
        "<script", // JavaScript opening tag
        "base64_decode", // Base64 decode function
        "eval(", // Eval function
        "gzinflate", // Gzip inflate function
        "str_rot13", // ROT13 encoding function
        "base64_encoded_php",
        "eval_base64_decode",
        "base64_decode_file",
        "base64_decode",
        "base64_encode",
        "exec_shell",
        "shell_exec",
        "popen",
        "fopen",
        "fwrite",
        "proc_open",
        "system",
        "curl"
    ];

    // Directories to exclude from scanning
    $excluded_dirs = [
        'wp-content/uploads',
        'wp-content/cache',
    ];

    // Scan the directory for malware
    $malware_found = false;
    $infected_files = [];
    $dir = new RecursiveDirectoryIterator($directory);
    $iterator = new RecursiveIteratorIterator($dir);

    foreach ($iterator as $file) {
        $file_path = $file->getPathname();

        // Skip excluded directories
        foreach ($excluded_dirs as $excluded_dir) {
            if (strpos($file_path, $excluded_dir) !== false) {
                continue 2;
            }
        }

        $finfo = finfo_open(FILEINFO_MIME_TYPE);
        $mime_type = finfo_file($finfo, $file_path);
        finfo_close($finfo);

        if (in_array($mime_type, $malware_types) || in_array(strtolower(pathinfo($file_path, PATHINFO_EXTENSION)), $malware_types)) {
            $file_contents = @file_get_contents($file_path);
            if ($file_contents === false) {
                $infected_files[] = "Could not read file: $file_path";
                continue;
            }
            $clean = true;
            foreach ($malware_strings as $malware_string) {
                if (strpos($file_contents, $malware_string) !== false) {
                    $clean = false;
                    break;
                }
            }

            // Check for base64-encoded malware
            if (preg_match("/base64_decode\s*\(/i", $file_contents)) {
                $clean = false;
            }

            if (!$clean) {
                $malware_found = true;
                $infected_files[] = $file_path;
                if ($mode === 'scan') {
                    // Backup the original file
                    $backup_path = $file_path . '.bak';
                    if (!@copy($file_path, $backup_path)) {
                        $infected_files[] = "Could not create backup of $file_path";
                        continue;
                    }
                    // Attempt to scrub the malware from the file
                    $cleaned_contents = preg_replace("/base64_decode\s*\(([^)]+)\)/i", "", $file_contents);
                    $cleaned_contents = str_replace($malware_strings, "", $cleaned_contents);
                    if (@file_put_contents($file_path, $cleaned_contents) === false) {
                        $infected_files[] = "Could not write cleaned contents to $file_path";
                        continue;
                    }
                    $infected_files[] = "Cleaned malware from $file_path and backed up original to $backup_path";
                }
            }
        }
    }

    // If no malware was found, return a message stating that the WordPress installation is clean
    if (!$malware_found) {
        return "No malware was found in WordPress installation: " . $directory . "\n";
    } else {
        // If malware was found, return a list of infected files
        $result = "The following files were found to be infected:\n";
        foreach ($infected_files as $infected_file) {
            $result .= $infected_file . "\n";
        }
        return $result;
    }
}

?>
